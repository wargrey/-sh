#lang scribble/lp2

@(require digimon/tamer)

@(define-bib SSH-ARCH
   #:title    "The Secure Shell Protocol Architecture"
   #:author   (org-author-name "RFC4251")
   #:date     2006
   #:url      "https://tools.ietf.org/html/rfc4251")

@(define-bib OpenSSL-Test
   #:title    "OpenSSL: Cryptography and SSL/TLS Toolkit"
   #:author   (org-author-name "OpenSSL Management Committee")
   #:date     2019
   #:url      "https://github.com/openssl/openssl/tree/master/test")

@(define-bib HMAC-SHA
   #:title    "Identifiers and Test Vectors for HMAC-SHA-224, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512"
   #:author   (org-author-name "RFC4231")
   #:date     2005
   #:url      "https://tools.ietf.org/html/rfc4231")

@handbook-story{The Secure Shell Protocol Architecture}

This section demonstrates the implementation of @~cite[SSH-ARCH].

@;tamer-smart-summary[]

@handbook-scenario{Data Type Representation}

@tamer-action[
 (mpint '0x0)
 (mpint '0x9a378f9b2e332a7)
 (mpint '0x80)
 (mpint '0x-1234)
 (mpint '0x-deadbeef)]

@tamer-action[
 (namelist '())
 (namelist '(zlib))
 (namelist '(zlib none))]

@handbook-scenario{Host Key Algorithms}

These test cases are defined in @~cite[OpenSSL-Test].

@tamer-action[
 (code:comment "rsa_test: key1")
 (define n
   (octets->integer
    '((0x00 0xAA 0x36 0xAB 0xCE 0x88 0xAC 0xFD 0xFF 0x55 0x52 0x3C 0x7F 0xC4 0x52 0x3F)
      (0x90 0xEF 0xA0 0x0D 0xF3 0x77 0x4A 0x25 0x9F 0x2E 0x62 0xB4 0xC5 0xD9 0x9C 0xB5)
      (0xAD 0xB3 0x00 0xA0 0x28 0x5E 0x53 0x01 0x93 0x0E 0x0C 0x70 0xFB 0x68 0x76 0x93)
      (0x9C 0xE6 0x16 0xCE 0x62 0x4A 0x11 0xE0 0x08 0x6D 0x34 0x1E 0xBC 0xAC 0xA0 0xA1)
      (0xF5))))

 (define e
   (octets->integer
    '((0x11))))

 (define d
   (octets->integer
    '((0x0A 0x03 0x37 0x48 0x62 0x64 0x87 0x69 0x5F 0x5F 0x30 0xBC 0x38 0xB9 0x8B 0x44)
      (0xC2 0xCD 0x2D 0xFF 0x43 0x40 0x98 0xCD 0x20 0xD8 0xA1 0x38 0xD0 0x90 0xBF 0x64)
      (0x79 0x7C 0x3F 0xA7 0xA2 0xCD 0xCB 0x3C 0xD1 0xE0 0xBD 0xBA 0x26 0x54 0xB4 0xF9)
      (0xDF 0x8E 0x8A 0xE5 0x9D 0x73 0x3D 0x9F 0x33 0xB3 0x01 0x62 0x4A 0xFD 0x1D 0x51))))

 (define p
   (octets->integer
    '((0x00 0xD8 0x40 0xB4 0x16 0x66 0xB4 0x2E 0x92 0xEA 0x0D 0xA3 0xB4 0x32 0x04 0xB5)
      (0xCF 0xCE 0x33 0x52 0x52 0x4D 0x04 0x16 0xA5 0xA4 0x41 0xE7 0x00 0xAF 0x46 0x12)
      (0x0D))))

 (define q
   (octets->integer
    '((0x00 0xC9 0x7F 0xB1 0xF0 0x27 0xF4 0x53 0xF6 0x34 0x12 0x33 0xEA 0xAA 0xD1 0xD9)
      (0x35 0x3F 0x6C 0x42 0xD0 0x88 0x66 0xB1 0xD0 0x5A 0x0F 0x20 0x35 0x02 0x8B 0x9D)
      (0x89))))

 (define dmp1
   (octets->integer
    '((0x59 0x0B 0x95 0x72 0xA2 0xC2 0xA9 0xC4 0x06 0x05 0x9D 0xC2 0xAB 0x2F 0x1D 0xAF)
      (0xEB 0x7E 0x8B 0x4F 0x10 0xA7 0x54 0x9E 0x8E 0xED 0xF5 0xB4 0xFC 0xE0 0x9E 0x05))))

 (define dmq1
   (octets->integer
    '((0x00 0x8E 0x3C 0x05 0x21 0xFE 0x15 0xE0 0xEA 0x06 0xA3 0x6F 0xF0 0xF1 0x0C 0x99)
      (0x52 0xC3 0x5B 0x7A 0x75 0x14 0xFD 0x32 0x38 0xB8 0x0A 0xAD 0x52 0x98 0x62 0x8D)
      (0x51))))

 (define iqmp
   (octets->integer
    '((0x36 0x3F 0xF7 0x18 0x9D 0xA8 0xE9 0x0B 0x1D 0x34 0x1F 0x71 0xD0 0x9B 0x76 0xA8)
      (0xA9 0x43 0xE1 0x1D 0x10 0xB2 0x4D 0x24 0x9F 0x2D 0xEA 0xFE 0xF8 0x0C 0x18 0x26))))

 (rsa-key n e d p q dmp1 dmq1 iqmp)]

@tamer-action[
 (code:comment "rsa_mp_test: key2048p3")
 (define n
   (octets->integer
    '((0x92 0x60 0xd0 0x75 0x0a 0xe1 0x17 0xee 0xe5 0x5c 0x3f 0x3d 0xea 0xba 0x74 0x91)
      (0x75 0x21 0xa2 0x62 0xee 0x76 0x00 0x7c 0xdf 0x8a 0x56 0x75 0x5a 0xd7 0x3a 0x15)
      (0x98 0xa1 0x40 0x84 0x10 0xa0 0x14 0x34 0xc3 0xf5 0xbc 0x54 0xa8 0x8b 0x57 0xfa)
      (0x19 0xfc 0x43 0x28 0xda 0xea 0x07 0x50 0xa4 0xc4 0x4e 0x88 0xcf 0xf3 0xb2 0x38)
      (0x26 0x21 0xb8 0x0f 0x67 0x04 0x64 0x43 0x3e 0x43 0x36 0xe6 0xd0 0x03 0xe8 0xcd)
      (0x65 0xbf 0xf2 0x11 0xda 0x14 0x4b 0x88 0x29 0x1c 0x22 0x59 0xa0 0x0a 0x72 0xb7)
      (0x11 0xc1 0x16 0xef 0x76 0x86 0xe8 0xfe 0xe3 0x4e 0x4d 0x93 0x3c 0x86 0x81 0x87)
      (0xbd 0xc2 0x6f 0x7b 0xe0 0x71 0x49 0x3c 0x86 0xf7 0xa5 0x94 0x1c 0x35 0x10 0x80)
      (0x6a 0xd6 0x7b 0x0f 0x94 0xd8 0x8f 0x5c 0xf5 0xc0 0x2a 0x09 0x28 0x21 0xd8 0x62)
      (0x6e 0x89 0x32 0xb6 0x5c 0x5b 0xd8 0xc9 0x20 0x49 0xc2 0x10 0x93 0x2b 0x7a 0xfa)
      (0x7a 0xc5 0x9c 0x0e 0x88 0x6a 0xe5 0xc1 0xed 0xb0 0x0d 0x8c 0xe2 0xc5 0x76 0x33)
      (0xdb 0x26 0xbd 0x66 0x39 0xbf 0xf7 0x3c 0xee 0x82 0xbe 0x92 0x75 0xc4 0x02 0xb4)
      (0xcf 0x2a 0x43 0x88 0xda 0x8c 0xf8 0xc6 0x4e 0xef 0xe1 0xc5 0xa0 0xf5 0xab 0x80)
      (0x57 0xc3 0x9f 0xa5 0xc0 0x58 0x9c 0x3e 0x25 0x3f 0x09 0x60 0x33 0x23 0x00 0xf9)
      (0x4b 0xea 0x44 0x87 0x7b 0x58 0x8e 0x1e 0xdb 0xde 0x97 0xcf 0x23 0x60 0x72 0x7a)
      (0x09 0xb7 0x75 0x26 0x2d 0x7e 0xe5 0x52 0xb3 0x31 0x9b 0x92 0x66 0xf0 0x5a 0x25))))
 
 (define e
   (octets->integer
    '(0x01 0x00 0x01)))
 
 (define d
   (octets->integer
    '((0x6a 0x7d 0xf2 0xca 0x63 0xea 0xd4 0xdd 0xa1 0x91 0xd6 0x14 0xb6 0xb3 0x85 0xe0)
      (0xd9 0x05 0x6a 0x3d 0x6d 0x5c 0xfe 0x07 0xdb 0x1d 0xaa 0xbe 0xe0 0x22 0xdb 0x08)
      (0x21 0x2d 0x97 0x61 0x3d 0x33 0x28 0xe0 0x26 0x7c 0x9d 0xd2 0x3d 0x78 0x7a 0xbd)
      (0xe2 0xaf 0xcb 0x30 0x6a 0xeb 0x7d 0xfc 0xe6 0x92 0x46 0xcc 0x73 0xf5 0xc8 0x7f)
      (0xdf 0x06 0x03 0x01 0x79 0xa2 0x11 0x4b 0x76 0x7d 0xb1 0xf0 0x83 0xff 0x84 0x1c)
      (0x02 0x5d 0x7d 0xc0 0x0c 0xd8 0x24 0x35 0xb9 0xa9 0x0f 0x69 0x53 0x69 0xe9 0x4d)
      (0xf2 0x3d 0x2c 0xe4 0x58 0xbc 0x3b 0x32 0x83 0xad 0x8b 0xba 0x2b 0x8f 0xa1 0xba)
      (0x62 0xe2 0xdc 0xe9 0xac 0xcf 0xf3 0x79 0x9a 0xae 0x7c 0x84 0x00 0x16 0xf3 0xba)
      (0x8e 0x00 0x48 0xc0 0xb6 0xcc 0x43 0x39 0xaf 0x71 0x61 0x00 0x3a 0x5b 0xeb 0x86)
      (0x4a 0x01 0x64 0xb2 0xc1 0xc9 0x23 0x7b 0x64 0xbc 0x87 0x55 0x69 0x94 0x35 0x1b)
      (0x27 0x50 0x6c 0x33 0xd4 0xbc 0xdf 0xce 0x0f 0x9c 0x49 0x1a 0x7d 0x6b 0x06 0x28)
      (0xc7 0xc8 0x52 0xbe 0x4f 0x0a 0x9c 0x31 0x32 0xb2 0xed 0x3a 0x2c 0x88 0x81 0xe9)
      (0xaa 0xb0 0x7e 0x20 0xe1 0x7d 0xeb 0x07 0x46 0x91 0xbe 0x67 0x77 0x76 0xa7 0x8b)
      (0x5c 0x50 0x2e 0x05 0xd9 0xbd 0xde 0x72 0x12 0x6b 0x37 0x38 0x69 0x5e 0x2d 0xd1)
      (0xa0 0xa9 0x8a 0x14 0x24 0x7c 0x65 0xd8 0xa7 0xee 0x79 0x43 0x2a 0x09 0x2c 0xb0)
      (0x72 0x1a 0x12 0xdf 0x79 0x8e 0x44 0xf7 0xcf 0xce 0x0c 0x49 0x81 0x47 0xa9 0xb1))))

 (define p
   (octets->integer
    '((0x06 0x77 0xcd 0xd5 0x46 0x9b 0xc1 0xd5 0x58 0x00 0x81 0xe2 0xf3 0x0a 0x36 0xb1)
      (0x6e 0x29 0x89 0xd5 0x2f 0x31 0x5f 0x92 0x22 0x3b 0x9b 0x75 0x30 0x82 0xfa 0xc5)
      (0xf5 0xde 0x8a 0x36 0xdb 0xc6 0xe5 0x8f 0xef 0x14 0x37 0xd6 0x00 0xf9 0xab 0x90)
      (0x9b 0x5d 0x57 0x4c 0xf5 0x1f 0x77 0xc4 0xbb 0x8b 0xdd 0x9b 0x67 0x11 0x45 0xb2)
      (0x64 0xe8 0xac 0xa8 0x03 0x0f 0x16 0x0d 0x5d 0x2d 0x53 0x07 0x23 0xfb 0x62 0x0d)
      (0xe6 0x16 0xd3 0x23 0xe8 0xb3))))

 (define q
   (octets->integer
    '((0x06 0x66 0x9a 0x70 0x53 0xd6 0x72 0x74 0xfd 0xea 0x45 0xc3 0xc0 0x17 0xae 0xde)
      (0x79 0x17 0xae 0x79 0xde 0xfc 0x0e 0xf7 0xa4 0x3a 0x8c 0x43 0x8f 0xc7 0x8a 0xa2)
      (0x2c 0x51 0xc4 0xd0 0x72 0x89 0x73 0x5c 0x61 0xbe 0xfd 0x54 0x3f 0x92 0x65 0xde)
      (0x4d 0x65 0x71 0x70 0xf6 0xf2 0xe5 0x98 0xb9 0x0f 0xd1 0x0b 0xe6 0x95 0x09 0x4a)
      (0x7a 0xdf 0xf3 0x10 0x16 0xd0 0x60 0xfc 0xa5 0x10 0x34 0x97 0x37 0x6f 0x0a 0xd5)
      (0x5d 0x8f 0xd4 0xc3 0xa0 0x5b))))

 (define dmp1
   (octets->integer
    '((0x05 0x7c 0x9e 0x1c 0xbd 0x90 0x25 0xe7 0x40 0x86 0xf5 0xa8 0x3b 0x7a 0x3f 0x99)
      (0x56 0x95 0x60 0x3a 0x7b 0x95 0x4b 0xb8 0xa0 0xd7 0xa5 0xf1 0xcc 0xdc 0x5f 0xb5)
      (0x8c 0xf4 0x62 0x95 0x54 0xed 0x2e 0x12 0x62 0xc2 0xe8 0xf6 0xde 0xce 0xed 0x8e)
      (0x77 0x6d 0xc0 0x40 0x25 0x74 0xb3 0x5a 0x2d 0xaa 0xe1 0xac 0x11 0xcb 0xe2 0x2f)
      (0x0a 0x51 0x23 0x1e 0x47 0xb2 0x05 0x88 0x02 0xb2 0x0f 0x4b 0xf0 0x67 0x30 0xf0)
      (0x0f 0x6e 0xef 0x5f 0xf7 0xe7))))

 (define dmq1
   (octets->integer
    '((0x01 0xa5 0x6b 0xbc 0xcd 0xe3 0x0e 0x46 0xc6 0x72 0xf5 0x04 0x56 0x28 0x01 0x22)
      (0x58 0x74 0x5d 0xbc 0x1c 0x3c 0x29 0x41 0x49 0x6c 0x81 0x5c 0x72 0xe2 0xf7 0xe5)
      (0xa3 0x8e 0x58 0x16 0xe0 0x0e 0x37 0xac 0x1f 0xbb 0x75 0xfd 0xaf 0xe7 0xdf 0xe9)
      (0x1f 0x70 0xa2 0x8f 0x52 0x03 0xc0 0x46 0xd9 0xf9 0x96 0x63 0x00 0x27 0x7e 0x5f)
      (0x38 0x60 0xd6 0x6b 0x61 0xe2 0xaf 0xbe 0xea 0x58 0xd3 0x9d 0xbc 0x75 0x03 0x8d)
      (0x42 0x65 0xd6 0x6b 0x85 0x97))))

 (define iqmp
   (octets->integer
    '((0x03 0xa1 0x8b 0x80 0xe4 0xd8 0x87 0x25 0x17 0x5d 0xcc 0x8d 0xa9 0x8a 0x22 0x2b)
      (0x6c 0x15 0x34 0x6f 0x80 0xcc 0x1c 0x44 0x04 0x68 0xbc 0x03 0xcd 0x95 0xbb 0x69)
      (0x37 0x61 0x48 0xb4 0x23 0x13 0x08 0x16 0x54 0x6a 0xa1 0x7c 0xf5 0xd4 0x3a 0xe1)
      (0x4f 0xa4 0x0c 0xf5 0xaf 0x80 0x85 0x27 0x06 0x0d 0x70 0xc0 0xc5 0x19 0x28 0xfe)
      (0xee 0x8e 0x86 0x21 0x98 0x8a 0x37 0xb7 0xe5 0x30 0x25 0x70 0x93 0x51 0x2d 0x49)
      (0x85 0x56 0xb3 0x0c 0x2b 0x96))))

 (rsa-key n e d p q dmp1 dmq1 iqmp)]

@handbook-scenario{Data Integrity Algorithms}

These test cases are defined in @~cite[HMAC-SHA].

@tamer-action[
 (hmac-sha256 (make-bytes 20 #x0B) #"Hi There")
 (hmac-sha256 #"Jefe" #"what do ya want for nothing?")
 (hmac-sha256 (make-bytes 20 #xAA) (make-bytes 50 #xDD))
 (hmac-sha256 (apply bytes (range #x01 #x1A)) (make-bytes 50 #xCD))
 (hmac-sha256-128 (make-bytes 20 #x0C) #"Test With Truncation")
 (hmac-sha256 (make-bytes 131 #xAA) #"Test Using Larger Than Block-Size Key - Hash Key First")
 (hmac-sha256 (make-bytes 131 #xAA) #"This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.")]

@handbook-reference[]

@; Chunks after `handbook-reference[]` will never be rendered in documents
@; <*> is the main chunk by convention.

@chunk[|<*>|
       (require digimon/tamer)
       (tamer-taming-start!)

       (module+ tamer |<architecture:*>|)]

@chunk[|<architecture:*>|
       (module+ story
         <datatype>)]

@chunk[<datatype>
       (require "../datatype.rkt")
       (require "../digitama/algorithm/hmac.rkt")
       (require "../digitama/algorithm/rsa.rkt")
       
       (require "../digitama/algorithm/pkcs/primitive.rkt")
       (require "../digitama/algorithm/pkcs/key.rkt")

       (define octets->integer
         (lambda [os]
           (pkcs#1-octets->integer (apply bytes (map symb0x->number (flatten os))))))
       
       (define mpint
         (lambda [hex]
           (define raw (~a hex))
           (define mphex (string->number (substring raw 2) 16))
           (define bs (ssh-mpint->bytes mphex))
           (define-values (restored _) (ssh-bytes->mpint bs))
           (cons (number->symb0x restored) (bytes->hex-string bs #:separator " "))))

       (define namelist
         (lambda [names]
           (define bs (ssh-namelist->bytes names))
           (define-values (restored _) (ssh-bytes->namelist bs))
           (cons restored (bytes->hex-string bs #:separator " "))))

       (define rsa-key
         (lambda [n e d p q dmp1 dmq1 iqmp]
           (define k (rsa-keygen (list p q) #:e e))
           ((if (eqv? n (rsa-private-key-n k)) printf eprintf) "n    = ~a~n" n)
           ((if (eqv? d (rsa-private-key-d k)) printf eprintf) "d    = ~a~n" d)
           ((if (eqv? dmp1 (rsa-private-key-dP k)) printf eprintf) "dP   = ~a~n" dmp1)
           ((if (eqv? dmq1 (rsa-private-key-dQ k)) printf eprintf) "dQ   = ~a~n" dmq1)
           ((if (eqv? iqmp (rsa-private-key-qInv k)) printf eprintf) "qInv = ~a~n" iqmp)
           k))

       (define hmac-sha256
         (lambda [key message]
           (printf "Key  = ~a (~a Bytes)~n" (bytes->hex-string key) (bytes-length key))
           (printf "Data = ~a (~a Bytes)~n" (bytes->hex-string message) (bytes-length message))
           (bytes->hex-string (ssh-hmac-sha256 key message))))

       (define hmac-sha256-128
         (lambda [key message]
           (printf "Key  = ~a (~a Bytes)~n" (bytes->hex-string key) (bytes-length key))
           (printf "Data = ~a (~a Bytes)~n" (bytes->hex-string message) (bytes-length message))
           (bytes->hex-string (ssh-hmac-sha256-128 key message))))]
